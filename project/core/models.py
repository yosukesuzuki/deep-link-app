# -*- coding: utf-8 -*-
# core.models

import hashlib

from google.appengine.ext import db
from kay.auth.models import GoogleUser


class Article(db.Model):
    title = db.StringProperty()
    updated_at = db.DateTimeProperty(auto_now=True)
    created_at = db.DateTimeProperty(auto_now_add=True)

    def __unicode__(self):
        return self.title


class ShortURLUser(GoogleUser):
    updated_at = db.DateTimeProperty(auto_now=True)
    created_at = db.DateTimeProperty(auto_now_add=True)


class ShortURL(db.Model):
    """
    set key_name from a code generated by ShortURLID.code
    """
    long_url = db.StringProperty(verbose_name='long URL', required=True)
    fallback_url = db.StringProperty(verbose_name='Fallback URL')
    iphone_url = db.StringProperty(verbose_name='iPhone URL')
    ipad_url = db.StringProperty(verbose_name='iPad URL')
    android_url = db.StringProperty(verbose_name='Android URL')
    wp_url = db.StringProperty(verbose_name='WindowsPhone URL')
    firefox_url = db.StringProperty(verbose_name='FireFox URL')
    user_created = db.StringProperty(verbose_name='Key of ShortURLUser')
    updated_at = db.DateTimeProperty(auto_now=True)
    created_at = db.DateTimeProperty(auto_now_add=True)

    def create(self):
        short_url_id = ShortURLID(long_url=self.long_url)
        short_url_id.put()
        self._key_name = short_url_id.code()
        self.put()

    def get_log_entity_key_name(self):
        user = db.get(self.user_created)
        hashed_url = hashlib.sha512(self.long_url).hexdigest()
        log_entity_key_name = user.key().name() + hashed_url
        return log_entity_key_name

    def check_exist_or_create(self):
        """
        :rtype: string
        """
        log_entity_key_name = self.get_log_entity_key_name()
        check_entity = ShortURLCreateLog.get_by_key_name(log_entity_key_name)
        if check_entity is not None:
            return check_entity.code
        self.create()
        short_url_create_log = ShortURLCreateLog(key_name=log_entity_key_name, code=self.key().name(),
                                                 long_url=self.long_url,
                                                 user_created=self.user_created, short_urls=[self.key().name()])
        short_url_create_log.put()
        return self.key().name()


class ShortURLCreateLog(db.Model):
    """
    key_name = key of user+sha512 of longurl
    """
    code = db.StringProperty(verbose_name='code of short url', required=True)
    long_url = db.StringProperty(verbose_name='long URL', required=True)
    user_created = db.StringProperty(verbose_name='Key of ShortURLUser')
    short_urls = db.StringListProperty(verbose_name='Array, Keys of ShortURL')
    updated_at = db.DateTimeProperty(auto_now=True)
    created_at = db.DateTimeProperty(auto_now_add=True)


class ShortURLID(db.Model):
    long_url = db.StringProperty(verbose_name='long URL', required=True)
    created_at = db.DateTimeProperty(auto_now_add=True)

    KEY_BASE = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    BASE = 62

    def code(self):
        """Return our code, our base-62 encoded id"""
        if not self.is_saved():
            return None
        nid = self.key().id()
        s = []
        while nid:
            nid, c = divmod(nid, ShortURLID.BASE)
            s.append(ShortURLID.KEY_BASE[c])
        s.reverse()
        return "".join(s)


class ShortURLRule(db.Model):
    long_url = db.StringProperty(verbose_name='long URL', required=True)
    fallback_url = db.StringProperty(verbose_name='Fallback URL')
    iphone_url = db.StringProperty(verbose_name='iPhone URL')
    ipad_url = db.StringProperty(verbose_name='iPad URL')
    android_url = db.StringProperty(verbose_name='Android URL')
    wp_url = db.StringProperty(verbose_name='WindowsPhone URL')
    firefox_url = db.StringProperty(verbose_name='FireFox URL')
    user_created = db.StringProperty(verbose_name='Key of ShortURLUser')
    updated_at = db.DateTimeProperty(auto_now=True)
    created_at = db.DateTimeProperty(auto_now_add=True)
